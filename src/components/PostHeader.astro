---
import { Picture, getImage, Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

export interface Props {
  title: string;
  publishDate: string;
  modifiedDate?: string;
  author?: string;
  tags?: string[];
  readingTime?: number;
  image?: string;
  imageAlt?: string;
  imageCredit?: string;
  imageCreditUrl?: string;
  imageCreditSource?: string;
  imageCreditSourceUrl?: string;
}

const {
  title,
  publishDate,
  modifiedDate,
  author,
  tags,
  readingTime,
  image,
  imageAlt,
  imageCredit,
  imageCreditUrl,
  imageCreditSource,
  imageCreditSourceUrl
} = Astro.props as Props;

const images = image ? import.meta.glob<{default: ImageMetadata }>(`/src/images/**/*.{jpeg,jpg,png}`) : undefined;
let heroImage
if (images) {
  heroImage = images[`/src/images/${image}`]()
}

---
<header>
  <div class="mb-4 lg:mb-8 flex flex-col items-center relative">
    {heroImage && (
      <Image
        src={heroImage}
        alt={imageAlt || title}
        width={1200}
        height={600}
        layout="full-width"
        fit="cover"
        quality='high'
      />
      <div class="text-caption">
        From <a href={imageCreditUrl} rel="noopener nofollow" target="_blank" class="underline">{imageCredit}</a> on <a href={imageCreditSourceUrl} rel="noopener nofollow" class="underline">{imageCreditSource}</a>
      </div>

    )}
  </div>

  <h1 class="text-page-title font-heading text-primary mb-4">{title}</h1>
  <div class="flex flex-col md:flex-row items-start md:items-center gap-2 text-secondary-text text-paragraph">
    <time datetime={publishDate}>
      Published on {new Date(publishDate).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}
    </time>
    {modifiedDate && (
      <time datetime={modifiedDate}>
        (Updated on {new Date(modifiedDate).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })})
      </time>
    )}
  </div>
  <div class="flex flex-col md:flex-row items-start md:items-center gap-2 text-secondary-text text-paragraph">
    {author && <span>by {author}</span>}
    {readingTime && <span>‚Ä¢ {readingTime} min read</span>}
  </div>
  <div class="flex flex-col md:flex-row items-start md:items-center gap-2 text-secondary-text">
    {tags && tags.length > 0 && (
      <div class="flex flex-wrap gap-2 mt-2 md:mt-0">
        <span class="font-heading text-primary-text text-caption m-2">üè∑Ô∏è Tags:</span>
        {tags.map(tag => (
          <span class=" font-heading text-primary text-caption underline m-2">
            #{tag}
          </span>
        ))}
      </div>
    )}
  </div>
</header>